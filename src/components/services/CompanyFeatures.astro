---
import H2Title from "../UI/H2Title.astro";
import Section from "../UI/Section.astro";
import SelectableFeatures from "./SelectableFeatures";

interface FeatureItem {
  id: string;
  title: string;
  description: string;
  icon: Icon;
  features?: {};
}
interface Icon {
  src: string;
  alt: string;
}

const { feature_selector } = Astro.props as { feature_selector: FeatureItem[] };
---

<Section class="space-y-12">
    <H2Title text="Qué te ofrecemos" />
    <div class="grid grid-cols-1 md:grid-cols-3 gap-12 w-full">
        
        {
            feature_selector.map(({ icon, id, title }) => (
                <button
                    class="group item flex items-center cursor-pointer px-6 py-4 rounded-2xl"
                    data-target={id}
                >
                    <img src={icon.src} alt={icon.alt} class="mr-3 size-16" />
                    <h2 class="font-semibold text-pretty text-2xl">{title}</h2>
                </button>
            ))
        }
    </div>

    <div class="max-w-6xl w-full bg-secondary-100/60 rounded-2xl">
    {
        // Area protegida
        <div class={`description animate-fade-up animate-duration-700 animate-ease-in-out hidden`} id={feature_selector[0].id}>
            <div class="flex px-8 py-6">
                <div class="flex flex-col justify-center text-xl">
                    {
                        feature_selector[0].description.split("\n").map((paragraph) => (
                            <p set:html={paragraph}></p>
                        ))
                    }
                </div>
            </div>
        </div>
    }

    {
        // control ausentismo
        <div class={`description animate-fade-up animate-duration-700 animate-ease-in-out hidden`} id={feature_selector[2].id}>
            <div class="flex px-8 py-6">
                <div class="flex flex-col justify-center text-xl">
                    {
                        feature_selector[2].description.split("\n").map((paragraph) => (
                            <p set:html={paragraph}></p>
                        ))
                    }
                </div>
            </div>
        </div>
    }

    {
        // Medicina laboral
        <div class={`description animate-fade-up animate-duration-700 animate-ease-in-out hidden`} id={feature_selector[1].id}>
            <SelectableFeatures client:only="react" features={feature_selector[1].features}/>
        </div>
    }
</Section>

<style>
    .button, .active{
       @apply bg-primary-100/60 rounded-2xl
    }
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);
  const selectedFeature = urlParams.get("feature") || "area_protegida";

  const buttons = document.querySelectorAll("button[data-target]");
  const descriptions = document.querySelectorAll(".description");
//   const contents = document.querySelectorAll(".content");

  // Mostrar la descripción y contenido seleccionado por defecto
  const defaultDescription = document.getElementById(selectedFeature);
//   const defaultContent = document.getElementById(selectedFeature + "_content");

  defaultDescription.classList.remove("hidden");
//   defaultContent.classList.remove("hidden");


  buttons.forEach(button => {
  
    const targetId = button.getAttribute("data-target");
    if (targetId === selectedFeature) {
      button.classList.add("active");
    }

    button.addEventListener("click", () => {
      const targetId = button.getAttribute("data-target");

      // Agregar clase active al botón seleccionado
      buttons.forEach(btn => btn.classList.remove("active"));
      button.classList.add("active");

      // Ocultar todas las descripciones y contenidos
      descriptions.forEach(desc => desc.classList.add("hidden"));
    //   contents.forEach(cont => cont.classList.add("hidden"));

      // Mostrar la descripción seleccionada
      const descriptionElement = document.getElementById(targetId);
    //   const contentElement = document.getElementById(targetId + "_content");

      if (descriptionElement) {
        descriptionElement.classList.remove("hidden");
      } else {
        console.error(`No se encontró el elemento con id: ${targetId}`);
      }

    //   if (contentElement) {
    //     contentElement.classList.remove("hidden");
    //   } else {
    //     console.error(`No se encontró el elemento con id: ${targetId + "_content"}`);
    //   }
    });
  });
});
</script>