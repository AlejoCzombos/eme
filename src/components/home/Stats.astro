---
import H2Title from '../UI/H2Title.astro';
import Section from '../UI/Section.astro'

interface Props {
  stats : Item[];
}
interface Item {
    number: number;
    title: string;
    icon: {
        src: string;
        alt: string;
    };
}

const { stats } = Astro.props as Props;

const formatNumber = (number: number) => {
  const numberFormat = new Intl.NumberFormat('es-ES');
  return numberFormat.format(number);
};
---

<section class="py-10 lg:px-0 lg:pt-24 lg:pb-12 max-w-6xl mx-auto">
  <H2Title class="max-w-7xl" line={false} text="Nuestros datos hasta 2024:" />
  <div class="grid grid-cols-2 lg:grid-cols-4 max-w-6xl m-auto gap-y-6">
    {stats.map((item) => (
      <div class="item flex flex-col items-center gap-1 lg:gap-5 group">
        <div class="flex justify-center items-center gap-3">
          <img src={item.icon.src} alt={item.icon.alt} class="size-10 lg:size-12" />
          <span 
            class="counter text-3xl lg:text-5xl text-primary-600"
            data-number={item.number}
            style={`min-width: ${formatNumber(item.number).toString().length}ch;`}
          ></span>
        </div>
        <p class="text-sm text-center">{item.title}</p>
      </div>
    ))}
  </div>
</section>

<script>
  // Función para animar un número con formato
  function animateNumber(counter) {
    const finalValue = parseInt(counter.getAttribute('data-number'), 10); // Obtén el valor final desde `data-number`
    const baseDuration = 1000; // Duración base en milisegundos para números pequeños
    const maxDuration = 4000; // Máxima duración para números grandes
    const duration = Math.min(maxDuration, baseDuration + Math.log10(finalValue) * 400); // Ajusta duración según el número
    const frameRate = 1000 / 40; // 60 fps
    const steps = duration / frameRate; // Total de pasos en la animación
    const increment = finalValue / steps; // Incremento por paso
    let currentValue = 0;

    const numberFormatter = new Intl.NumberFormat('es-ES'); // Formato con separadores de miles

    const updateCounter = () => {
      currentValue += increment;
      if (currentValue >= finalValue) {
        currentValue = finalValue; // Asegúrate de no exceder el valor final
        clearInterval(timer); // Detén la animación
      }
      counter.textContent = numberFormatter.format(Math.floor(currentValue)); // Formatea el número
    };

    const timer = setInterval(updateCounter, frameRate); // Actualiza cada frame
  }

  // Configurar Intersection Observer
  function setupIntersectionObserver() {
    const counters = document.querySelectorAll('.counter');
    const observerOptions = {
      root: null, // Observa dentro de la ventana del navegador
      threshold: 0.5 // Al menos el 50% de un contador debe ser visible
    };

    const observer = new IntersectionObserver((entries, observer) => {
      // Si al menos uno es visible, animar todos los contadores
      const isAnyVisible = entries.some(entry => entry.isIntersecting);
      if (isAnyVisible) {
        counters.forEach((counter) => animateNumber(counter)); // Inicia la animación para todos
        observer.disconnect(); // Detén la observación una vez que se activa
      }
    }, observerOptions);

    // Observa el primer contador (con suficiente para detectar visibilidad)
    counters.forEach((counter) => observer.observe(counter));
  }

  // Inicializa cuando la página cargue
  window.addEventListener('DOMContentLoaded', setupIntersectionObserver);
</script>

<!-- <style>
  @property --num {
    syntax: "<integer>";
    initial-value: 0;
    inherits: false;
  }

  span.counter {
    display: inline-block;
    text-align: center;
    animation: counter 3s cubic-bezier(0.075, 0.82, 0.165, 1) forwards;
    counter-reset: num var(--num);
  }

  span.counter::after {
    content: counter(num);
  }

  @keyframes counter {
    from {
      --num: 0;
    }
    to {
      --num: var(--final-num);
    }
  }
</style> -->